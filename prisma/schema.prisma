generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

generator edge {
  provider   = "prisma-client-js"
  output     = "../lib/prisma-edge"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ScamReport {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  description    String
  scammerDetails Json?
  city           String?
  country        String?
  region         String?
  ipHash         String?
  latitude       Float?
  longitude      Float?
  verified       Boolean   @default(false)
  trustScore     Int       @default(1)
  reportCount    Int       @default(1)
  reporterName   String?
  reporterEmail  String?
  anonymous      Boolean   @default(true)
  outcome        Json?
  screenshots    String?
  evidence       String?
  scamTypeId     String?
  comments       Comment[]
  flags          Flag[]
  scamType       ScamType? @relation(fields: [scamTypeId], references: [id])
  votes          Vote[]

  @@index([country, city])
  @@index([createdAt])
}

model Comment {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  content   String
  reportId  String
  parentId  String?
  userId    String?
  parent    Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]  @relation("CommentReplies")
  report    ScamReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id])

  @@index([reportId])
  @@index([parentId])
}

model Vote {
  id       String     @id @default(cuid())
  reportId String
  userId   String
  voteType String
  report   ScamReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reportId, userId])
  @@index([reportId])
}

model WikiPage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @unique
  slug      String   @unique
  content   String
  category  String
  country   String?
  views     Int      @default(0)
  featured  Boolean  @default(false)

  @@index([category])
  @@index([country])
  @@index([featured])
}

model SearchCache {
  id          String   @id @default(cuid())
  query       String   @unique
  results     String
  lastUpdated DateTime @default(now())
  hitCount    Int      @default(1)

  @@index([query])
  @@index([lastUpdated])
}

model AIScamReport {
  id                     String   @id @default(cuid())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  summary                String
  averageRiskLevel       String
  averageFinancialImpact Float
  category               String
}

model ScamType {
  id            String       @id @default(cuid())
  name          String       @unique
  createdAt     DateTime     @default(now())
  createdBy     String?
  isApproved    Boolean      @default(false)
  isUserCreated Boolean      @default(false)
  moderatedAt   DateTime?
  moderatedBy   String?
  reports       ScamReport[]
  postLinks     EducationPostScamType[]
  contactLinks  ContactScamType[]

  @@index([isApproved])
  @@index([isUserCreated])
}

model Flag {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  reportId  String
  userId    String
  reason    String?
  report    ScamReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reportId, userId])
  @@index([reportId])
}

model User {
  id                   String         @id @default(cuid())
  email                String         @unique
  username             String         @unique
  name                 String?
  image                String?
  notificationSettings String         @default("{}")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  role                 String         @default("user")
  comments             Comment[]
  flags                Flag[]
  notifications        Notification[]
  votes                Vote[]

  @@index([role])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OutcomeType {
  id        String   @id @default(cuid())
  value     String   @unique
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Educational posts (blog-style) for learning hub
model EducationPost {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  slug            String           @unique
  title           String
  excerpt         String?
  bodyMd          String           // Markdown/MDX content
  status          PostStatus       @default(DRAFT)
  publishedAt     DateTime?
  category        PostCategory
  heroImageUrl    String?
  heroSvg         String?
  heroAlt         String?
  country         String?
  region          String?
  city            String?
  canonicalUrl    String?
  metaTitle       String?
  metaDescription String?
  featured        Boolean          @default(false)
  authorName      String?
  sourceUrl       String?

  scamTypes       EducationPostScamType[]
  tags            PostTag[]

  @@index([category])
  @@index([status])
  @@index([publishedAt])
  @@index([country, region, city])
}

/// Tags, shared between posts and contacts
model Tag {
  id    String   @id @default(cuid())
  name  String   @unique
  posts PostTag[]
  contacts ContactTag[]
}

model PostTag {
  postId String
  tagId  String
  post   EducationPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@index([tagId])
}

model EducationPostScamType {
  postId     String
  scamTypeId String
  post       EducationPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  scamType   ScamType      @relation(fields: [scamTypeId], references: [id], onDelete: Cascade)

  @@id([postId, scamTypeId])
  @@index([scamTypeId])
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostCategory {
  REPORT_TO_AUTHORITIES
  PREVENTION
  CHECKLIST
  RECOVERY
  NEWS
  GUIDE
}

/// Community-driven localized contacts (authorities/resources)
model Contact {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orgName        String
  category       ContactCategory
  description    String?
  website        String?
  phone          String?
  email          String?
  submitUrl      String?         // official reporting form link, if any
  languageCodes  String[]
  country        String?
  region         String?
  city           String?
  status         ContactStatus   @default(PUBLISHED)
  verified       Boolean         @default(false)
  source         String?
  lastVerifiedAt DateTime?
  createdById    String?

  scamTypes      ContactScamType[]
  tags           ContactTag[]

  @@index([category])
  @@index([status, verified])
  @@index([country, region, city])
}

model ContactScamType {
  contactId  String
  scamTypeId String
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  scamType   ScamType @relation(fields: [scamTypeId], references: [id], onDelete: Cascade)

  @@id([contactId, scamTypeId])
  @@index([scamTypeId])
}

model ContactTag {
  contactId String
  tagId     String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contactId, tagId])
  @@index([tagId])
}

enum ContactCategory {
  AUTHORITY
  CONSUMER_PROTECTION
  FINANCIAL_REGULATOR
  POLICE
  ADVISORY
  OTHER
}

enum ContactStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  ARCHIVED
}
